// ==============================================
// NOR clock div = WCLK/8 = (3+1)*2
// ==============================================
write(0x9c04, 0x0003);

// ==============================================
//            Engine & Clcok Setting
// ==============================================
// General reset register  and  General clock register
write(0x0202, 0xffff);
write(0x0012, 0x0008);
write(0x0014, 0xC001);                              // MCLK PLL1_OUT1 / 2 (Memory 180MHz)
write(0x0016, 0x102a);
write(0x0018, 0xc001);                              // NCLK PLL1_OUT1 / 2 (AHB/RISC 180MHz)

if (read_mask(0x0000, 0x0003)!=0x0003) {            // Booting mode
    write(0x001a, 0x0008);
} else {
    write(0x001a, 0x1008);
}

write(0x001c, 0xc003);                              // WCLK PLL1_OUT1 / 4 (APB 90MHz)

if (read_mask(0x0000, 0x0003)!=0x0003) {            // Booting mode
    write(0x001e, 0x0aaa);
} else {
    write(0x001e, 0x3aaa);
}

write(0x0020, 0x0aaa);                              // APB Clock

if (read_mask(0x0000, 0x0003)!=0x0003) {            // Booting mode
    write(0x0022, 0x3cc0);                          // APB Reset, do not reset NOR0, SDIP
} else {
    write(0x0022, 0x3fc0);                          // APB Reset
}

write(0x0026, 0x302a);
write(0x0028, 0xC000);                              // DCLK PPL3_OUT1 (PPL3 Clock) LCD
write(0x002a, 0x30aa);
write(0x002c, 0x0000);                              // ECLK PPL3_OUT1 (PPL3 Clock) TVE
write(0x002e, 0x300a);
write(0x0030, 0x8001);                              // ICLK PLL1_OUT1 / 2 (ISP 180MHz)
write(0x0032, 0x702b);
write(0x0034, 0x8001);                              // XCLK PLL1_OUT1 / 2 (Video 180MHz)
write(0x0036, 0xfaaa);
write(0x0038, 0x9001);                              // JCLK PLL1_OUT2 / 2 (JPEG 120MHz)
write(0x003A, 0xA000);                              // AMCLK PLL2_OUT1     (Audio, run-time adjust sampling rate)
write(0x003C, 0x8000);                              // ZCLK  PLL2_OUT1 / 1 (Audio, run-time adjust sampling rate)
write(0x003e, 0x70aa);                              
write(0x0040, 0x0000);                              // PCLK
write(0x0042, 0x1002);                              
write(0x0044, 0xf7ff);                              
write(0x0046, 0x100a);                              
write(0x0048, 0x700a);                              
write(0x004a, 0x1002);                              
write(0x004c, 0xC000);                              // FCLK PLL1_OUT1 (ARM 360MHz)

if (read_mask(0x0000, 0x0003)!=0x0003) {            // Booting mode
    write(0x004e, 0x003f);                          // Do not reset ARM
} else {
    write(0x004e, 0x803f);
}

write(0x0050, 0x0000);                              // YCLK PPL3_OUT1 (PPL3 Clock) TVE
write(0x0052, 0xC000);                              // LCLK PPL3_OUT1 (PPL3 Clock) LCD
write(0x0054, 0x8001);                              // DHCLK PLL1_OUT1 / 2 (180MHz)
write(0x0056, 0x80ff);                              
write(0x0058, 0x9000);                              // TCLK PLL1_OUT2 (OpenVG Tesselation 240MHz)
write(0x005a, 0x9000);                              // VCLK PLL1_OUT2 (OpenVG Render 240MHz)
write(0x0060, 0xf801);                              // REFCLK
write(0x0062, 0x9009);                              // TSP and CAPCLK(M17CLK) Clock Setting
write(0x0064, 0x8000);                              // CAPCLK
                                
// Disable CLK Reset                                
write(0x0012, 0x0008);                              
write(0x0016, 0x002a);                              // Enable M1CLK/N2CLK/N10CLK Setting
write(0x001a, 0x0008);                              // Enable N1CLK Setting
write(0x001e, 0x0aaa);                              // Enable W0CLK/W1CLK/W2CLK/W3CLk/W4CLK/W5CLK Setting
write(0x0020, 0x0a2a);                              // Enable W6CLK/W7CLK/W8CLK/W9CLk/W11CLK Setting, Disable W10CLK (KBC)
write(0x0022, 0x0000);                              // USB Clock Setting
write(0x0026, 0x0000);                              // Disable CQ
write(0x002a, 0x0000);                              // Disable DHCLK/LCLK/DCLK Clock Setting
write(0x002e, 0x0000);                              // Disable YCLK/ECLK Clock Setting

if (read_mask(0x0000, 0x0003)!=0x0003) {            // Booting mode
    write(0x0032, 0x0021);                          // Disable N5CLK/M5CLK/ICLK Clock Setting, Enable AHB & ISP SRAM clock for booting
} else {                            
    write(0x0032, 0x0000);                          // Disable N5CLK/M5CLK/ICLK Clock Setting
}

write(0x0036, 0x0000);                              // Disable JPEG Clock Setting
write(0x003e, 0x0000);                              // Disable Audio DAC Clock Setting
write(0x0042, 0x0000);                              // Disable PCR Clock Setting
write(0x0044, 0x0000);                              // Disable RISC Clock Setting
write(0x0046, 0x0000);                              // Disable USB Clock Setting
write(0x0048, 0x000a);                              // Enable TSI Clock Setting
write(0x004a, 0x0000);                              // Disable UIENC Clock Setting
write(0x004e, 0x003f);                              // Enable ARM Clcok Setting
write(0x0056, 0x0000);                              // Disable OpenVG Clock Setting
write(0x0060, 0x3801);                              // Eanble REFCLK
write(0x0062, 0x0000);                              // Disable TSP and CAPCLK(M17CLK)
write(0x0064, 0x8000);                              // Disable CAP CAPCLK and Keep HDMIRX RSTN
write(0x16b2, 0x1029);

// Powerdown DAC
write(0x1a02, 0xffff);                              // Powerdown TVDAC

// Sdclk div = WCLK/8
write(0xb010, 0x001c);

// SD IO delay
write(0xb08c, 0x00ff);
write(0xb08e, 0x0100);

// NAND IO delay
// write(0x7024, 0x7777);
// write(0x7026, 0x0207);

// Set Host clock to PLL2 temporary, and set it to PLL1_OUT2 latter
write(0x0010, 0x5000);                              // BCLK PLL2_OUT1 (Host 33MHz)

// ==============================================
// PLL1 720MHz ck1_n1=360MHz , ck1_n2=240MHz
// ==============================================
write(0x00a0, 0x401e);
write(0x00a2, 0x0302);
write(0x00a4, 0x22d0);
write(0x00a4, 0x32d0);
write(0x00a4, 0x22d0);

// Set the host clock to PLL1_OUT2
write(0x0010, 0x4802);                              // BCLK PLL1_OUT2 / 3 (Host 80MHz)

// ==============================================
// PLL2 ck2_n1=166MHz , ck2_n2=166MHz
// ==============================================
// write(0x00b0, 0x401e);
// write(0x00b2, 0x0404);
// write(0x00b4, 0x2298);
// write(0x00b4, 0x3298);
// write(0x00b4, 0x2298);

// write(0x00b4, 0x8000);                           // Power down PLL

// ==============================================
// PLL3 ck3_n1=148.5MHz , ck3_n2=74.25MHz
// ==============================================
// write(0x00c0, 0x401e);
// write(0x00c2, 0x0c06);
// write(0x00c4, 0x237b);
// write(0x00c4, 0x337b);
// write(0x00c4, 0x237b);

// write(0x00c4, 0x8000);                           // Power down PLL

// Host bus controller registers
write(0x0200, 0x0000);
write(0x0210, 0x0002);                              // Host_IO_Drv="01"
write(0x0214, 0x0c00);

// ==============================================
//              AHB Setting
// ==============================================
write(0x03da, 0x7508);                              // AHB Wrapper Setting
write(0x5484, 0x0008);                              // Set AHB IDLE count to 8

// ==============================================
//              Memory Setting
// ==============================================
// Memory IO strength Setting

// Memory controller registers
// select MA13 MA12 as bank address
// tiling, bank interleave, 128MB 8banks 16BusWidth 10BitsCadd tilingWidth 128byte
write(0x0300, 0xb2a8);
write(0x0302, 0x0000);
write(0x030a, 0x0025);                              // Enable auto precharge, 2 path
write(0x0310, 0x1522);                              // B0DTRFC,B0DTRCD, B0DTRP
write(0x0312, 0x6412);                              // B0DTWR, B0DTWTR,B0DTXP,B0DTRTW
write(0x0314, 0x0027);                              // B0DTDQM,B0DTRRD,B0DTDQL --OM
write(0x0316, 0x1000);                              // B0DTRTP,B0DTREFI
write(0x0318, 0x2208);                              // B0DTENCKGAT,B0DTRAS
write(0x031A, 0x2000);                              // B0DTBL8,B0DTWL--OM
write(0x031c, 0x9121);                              // B0DTMRD,B0DTXSNR
                                
write(0x0340, 0x2A40);                              // PLL MX2CLK UPDATE --OM
write(0x0340, 0x3A40);                              // PLL MX2CLK UPDATE --OM
write(0x0340, 0x2A40);                              // PLL MX2CLK UPDATE --OM

// ==============================================
//              FRange Selection
// ==============================================
if (0) {
    write(0x16b2, 0x0000);                          // clear reg[0x16b2]

    write(0x0342, 0x2884);                          // set FRange=4
    wait(7500); // 75us @ 200MHz NCLK

    if ( read_mask(0x0346, 0x000F)==0x0001 ) { mask(0x16b2, 0x0001, 0x0001); }
    if ( read_mask(0x0346, 0x000F)==0x0001 ) { mask(0x16b2, 0x0002, 0x0002); }
    if ( read_mask(0x0346, 0x000F)==0x0001 ) { mask(0x16b2, 0x0004, 0x0004); }
    if ( read_mask(0x0346, 0x000F)==0x0001 ) { mask(0x16b2, 0x0008, 0x0008); }

    write(0x0342, 0x0885);                          // DLL reset
    write(0x0342, 0x2885);                          // set FRange=5
    wait(7500); // 75us @ 200MHz NCLK

    if ( read_mask(0x0346, 0x000F)==0x0001 ) { mask(0x16b2, 0x0010, 0x0010); }
    if ( read_mask(0x0346, 0x000F)==0x0001 ) { mask(0x16b2, 0x0020, 0x0020); }
    if ( read_mask(0x0346, 0x000F)==0x0001 ) { mask(0x16b2, 0x0040, 0x0040); }
    if ( read_mask(0x0346, 0x000F)==0x0001 ) { mask(0x16b2, 0x0080, 0x0080); }

    write(0x0342, 0x0886);
    write(0x0342, 0x2886);                          // set FRange=6
    wait(7500); // 75us @ 200MHz NCLK

    if ( read_mask(0x0346, 0x000F)==0x0001 ) { mask(0x16b2, 0x0100, 0x0100); }
    if ( read_mask(0x0346, 0x000F)==0x0001 ) { mask(0x16b2, 0x0200, 0x0200); }
    if ( read_mask(0x0346, 0x000F)==0x0001 ) { mask(0x16b2, 0x0400, 0x0400); }
    if ( read_mask(0x0346, 0x000F)==0x0001 ) { mask(0x16b2, 0x0800, 0x0800); }

    write(0x0342, 0x0887);
    write(0x0342, 0x2887);                          // set FRange=7
    wait(7500); // 75 us @ 200MHz NCLK

    if ( read_mask(0x0346, 0x000F)==0x0001 ) { mask(0x16b2, 0x1000, 0x1000); }
    if ( read_mask(0x0346, 0x000F)==0x0001 ) { mask(0x16b2, 0x2000, 0x2000); }
    if ( read_mask(0x0346, 0x000F)==0x0001 ) { mask(0x16b2, 0x4000, 0x4000); }
    if ( read_mask(0x0346, 0x000F)==0x0001 ) { mask(0x16b2, 0x8000, 0x8000); }

    if ( read_mask(0x16b2, 0xF0FF)==0xF0FF ) {
        write(0x0342, 0x0885);
        write(0x0342, 0x2885);                      // FRange=5
    } else {
        if ( read_mask(0x16b2, 0xF000)==0xF000 ) {
            write(0x0342, 0x0887);
            write(0x0342, 0x2887);                  // FRange=7
        } else {
            if ( read_mask(0x16b2, 0x0F00)==0x0F00 ) {
                write(0x0342, 0x0886);
                write(0x0342, 0x2886);              // FRange=6
            } else {
                if ( read_mask(0x16b2, 0x00F0)==0x00F0 ) {
                    write(0x0342, 0x0885);
                    write(0x0342, 0x2885);          // FRange=5
                } else {
                    if ( read_mask(0x16b2, 0x0000F)==0x000F ) {
                        write(0x0342, 0x0884);
                        write(0x0342, 0x2884);      // FRange=4
                    } else {
                        write(0x0342, 0x0887);
                        write(0x0342, 0x2887);      // default
                    }
                }
            }
        }
    }
} else {                                            // Fix DLL setting
    write(0x0342, 0x2885);                          // Default DLL setting
}
// ==============================================
//              End of FRange Selection
// ==============================================

write(0x0344, 0x4144);                              // DLLPHASE
write(0x0348, 0x0302);                              // B0DTDQSI
                                
write(0x0334, 0x0606);                              // MCLKP Out Setting & MA &CMD
write(0x0336, 0x8000);                              // ODT Enable & MDQS IO Driving
write(0x0330, 0x0000);                              // IO Driving
write(0x0332, 0x1800);                              // IO Driving
                                
// PIN MUX                              
write(0x0350, 0x0003);                              //             rasn->casn
write(0x0352, 0x0402);                              // casn->wen,  wen->rasn
write(0x0354, 0x160a);                              // mba0->modt, mba1->ma5
write(0x0356, 0x0010);                              //             modt->ma11
write(0x0358, 0x1114);                              // ma0->ma12,  ma1->mba1
write(0x035a, 0x0d0f);                              // ma2->ma8,   ma3->ma10
write(0x035c, 0x0e08);                              // ma4->ma9,   ma5->ma3
write(0x035e, 0x0005);                              //             ma7->ma0
write(0x0360, 0x0c07);                              // ma8->ma7,   ma9->ma2
write(0x0362, 0x1309);                              // ma10->mba0, ma11->ma4
write(0x0364, 0x0600);                              // ma12->ma1
                                
write(0x0396, 0xbf00);                              // MAX GNT

write(0x0338, 0x0000);
write(0x033A, 0x1212);
write(0x0338, 0x0080);

write(0x0338, 0x0001);
write(0x033A, 0x1616);
write(0x0338, 0x0081);

write(0x0338, 0x0002);
write(0x033A, 0x1616);
write(0x0338, 0x0082);

write(0x0338, 0x0003);
write(0x033A, 0x1616);
write(0x0338, 0x0083);

write(0x0338, 0x0004);
write(0x033A, 0x1616);
write(0x0338, 0x0084);

write(0x0338, 0x0005);
write(0x033A, 0x1212);
write(0x0338, 0x0085);

write(0x0338, 0x0006);
write(0x033A, 0x1616);
write(0x0338, 0x0086);

write(0x0338, 0x0007);
write(0x033A, 0x1212);
write(0x0338, 0x0087);

write(0x0338, 0x0008);
write(0x033A, 0x1616);
write(0x0338, 0x0088);

write(0x0338, 0x0009);
write(0x033A, 0x1818);
write(0x0338, 0x0089);

write(0x0338, 0x000A);
write(0x033A, 0x1616);
write(0x0338, 0x008A);

write(0x0338, 0x000B);
write(0x033A, 0x1818);
write(0x0338, 0x008B);

write(0x0338, 0x000C);
write(0x033A, 0x1c1c);
write(0x0338, 0x008C);

write(0x0338, 0x000D);
write(0x033A, 0x1818);
write(0x0338, 0x008D);

write(0x0338, 0x000E);
write(0x033A, 0x1818);
write(0x0338, 0x008E);

write(0x0338, 0x000F);
write(0x033A, 0x1616);
write(0x0338, 0x008F);

write(0x0338, 0x8000);                              // Enable Absorber

wait(50);                                           // 500ns, 500ns * 400MHz / 4 = 50, assume CPU 400MHz

// Extend mode register 2: 1X refresh rate
write(0x0304, 0x8000);
write(0x0308, 0x0800);
wait(1);                                            // 1*mclk
write(0x0308, 0x8800);
write(0x0316, 0x12b7);
wait(1);                                            // 2*mclk

// Extend mode register 3:
write(0x0304, 0xc000);
write(0x0308, 0x0800);
wait(1);                                            // 1*mclk
write(0x0308, 0x8800);
wait(1);                                            // 2*mclk

// Extend mode register: DLL enable
write(0x0304, 0x4000);
write(0x0308, 0x0800);
wait(1);                                            // 1*mclk
write(0x0308, 0x8800);
wait(1);                                            // 2*mclk

// mode register: burst length=4, CAS latency=6 , DLL reset
write(0x0304, 0x0162);
write(0x0308, 0x0800);
wait(1);                                            // 1*mclk
write(0x0308, 0x8800);
wait(1);                                            // 330ns

// mode register: burst length=4, CAS latency=6, DLL reset Off
write(0x0304, 0x0862);
write(0x0308, 0x0800);
wait(1);                                            // 1*mclk
write(0x0308, 0xc800);
wait(1);                                            // 2*mclk

// Extend mode register: OCD default
write(0x0304, 0x43C4);
write(0x0308, 0x0800);
wait(1);                                            // 1*mclk
write(0x0308, 0x8800);
wait(1);                                            // 2*mclk

// Extend mode register: OCD exit
write(0x0304, 0x4006);                              // ODT
write(0x0308, 0x0800);
wait(1);                                            // 1*mclk
write(0x0308, 0xC880);                              // turn off PD
wait(42);                                           // 420 ns

// Memory Priority Setting for Arbitration
write(0x0380, 0x1011);                              // Swap the priority for AHB > RISC > ARM > USB
write(0x0386, 0x0a0b);

write(0x03aa, 0x17ff);                              // BIST END ADDRESS

// ==============================================
//           End of Memory Setting
// ==============================================
